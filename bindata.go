// Code generated by go-bindata.
// sources:
// html/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _htmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x6d\x8f\xdb\x36\x12\xfe\xde\x5f\xc1\x32\x45\x6d\xa3\x16\xe5\xdd\x75\x37\xdb\xad\x65\x20\xd9\x26\x69\x0e\xe9\xa1\xc8\xe6\xd0\x97\x20\x28\x28\x6a\x24\x71\x4d\x91\x3a\x92\xda\x8d\x13\xec\x7f\x3f\x50\x2f\xb6\x65\x53\xfb\x12\x14\xb8\x3b\x7f\x11\x45\x0e\x9f\x99\x79\x86\x26\x67\xa8\x45\x6e\x0b\xb1\xfc\x0a\x21\x84\x16\x39\xd0\xa4\x69\xd6\xaf\x86\x69\x5e\x5a\x64\x34\x8b\x70\x6e\x6d\x69\xce\xc3\xd0\x9c\x10\x5a\xd0\x4f\x4a\xd2\x1b\x43\x98\x2a\x42\x63\xb9\x65\x79\x60\x92\x95\x09\xaf\x4c\x18\x57\x32\x11\x60\xc2\x39\x99\x93\x59\x3b\x48\xae\x0c\x5e\x2e\xc2\x06\xee\x00\x7f\xf3\xee\x7e\x3d\x5d\x4c\x25\x40\xae\xfe\x5d\x81\x5e\xd7\xaa\x9a\x66\x70\x42\xe6\xe4\x88\x14\x5c\x3a\xdc\xde\x6c\x2e\x2d\x64\x9a\xdb\x75\x84\x4d\x4e\x8f\xbf\x3f\x0d\x2e\x2e\x7f\x57\xfa\xf7\xeb\x3f\xd9\xbb\x15\xe5\x1f\x4f\xff\xb8\x56\xa7\x3f\x97\x25\xfb\xf3\x15\xd8\xf8\x8f\x5f\x5e\xfd\x76\xf9\x52\x3c\xbf\x39\xfb\x39\xbd\xf8\x87\x8a\xfa\x58\x4c\x2b\x63\x94\xe6\x19\x97\x11\xa6\x52\xc9\x75\xa1\x2a\xbf\x1f\x82\xcb\x15\xd2\x20\x22\x6c\xec\x5a\x80\xc9\x01\x2c\x46\xb9\x86\x74\xc7\x97\x44\x5e\x19\xc2\x84\xaa\x92\x54\x50\x0d\xb5\x43\xf4\x8a\x7e\x0c\x05\x8f\x4d\x58\x50\x0b\x9a\x53\xc1\x3f\x41\x78\x44\x66\x64\x16\x32\xd3\xeb\xad\xfd\x65\xc6\xe0\x7b\xe2\xf3\x68\x3d\x57\x87\x6a\x7a\xe1\x42\xfb\xfa\x96\x7d\x9a\x94\x34\x16\x31\xc1\x41\x5a\x14\xa1\x36\xe0\x97\xcd\x83\x4b\x6e\x1b\xdc\x9f\x20\xa5\x95\xb0\xcf\xca\xf2\xa2\x16\x1d\x8f\x98\xa5\x99\xb9\xe6\x26\x88\xd7\x05\x65\xa3\xc9\x8f\x1e\xd8\x24\x46\x51\x8b\x4d\x32\xb0\x97\xa0\xaf\x39\x83\x16\xa1\x55\xf5\x16\x0a\x65\xe1\x17\x25\x33\xd5\x0c\x90\x94\x32\xab\xf4\x7a\x8a\x46\x85\xeb\x4d\xe2\x80\x5a\x41\xcd\x68\x42\x92\xb8\xd5\xeb\xd4\x79\xf4\x39\x1d\x96\xda\xca\xa0\x08\xa5\x95\x64\x96\x2b\x39\x2e\xb5\xba\x02\x66\x27\xe8\x73\x6f\x46\x37\x4b\x09\x20\x42\x65\x63\xbc\x99\x7c\xce\x25\xde\x73\xc7\xfd\x92\x98\x30\x25\x04\x34\xa8\xd8\xd4\xb2\x78\x42\x52\x2e\x93\xf1\x67\xdc\xaa\xc1\xe7\xa8\x6d\xdd\x4e\x08\x35\xcf\xb4\xa6\xeb\xf1\x84\xd8\x1c\xe4\x38\x51\xcc\xa0\x68\xe9\x31\xa4\x5e\xfc\x29\xaa\x25\x88\x00\x99\xd9\x1c\x2d\xd1\x6c\x82\x3e\x23\xaf\xac\xfb\x7d\x33\xc6\xa4\x33\xe2\xfd\xec\x03\xe1\x52\x82\x7e\x07\x1f\x5d\x18\x5b\x13\xd0\x77\x08\xbb\x36\x03\x63\xb8\xcc\xce\x11\x46\xdf\x21\xa7\xc3\xc9\x37\x73\x0f\xfd\x74\xbf\xdb\x43\xb5\xb7\x93\x5e\xd7\xad\x8f\x7f\x9a\x24\xbf\x52\xb6\xa2\x19\xf4\x02\xb0\xca\x7c\xe4\x3b\xfb\xcb\x46\xda\xd1\x48\xcb\x12\x64\x32\xc6\x0b\xc1\x11\x13\xd4\x98\x68\xe4\xe8\xa6\xa5\xe1\xb1\x80\xc0\x6d\x6d\xa0\xd1\x61\x57\x20\x55\x50\x50\x9d\x71\x39\x5a\xb6\x70\x68\x11\x2f\x9d\xa7\xe5\x2a\x73\x0c\x2c\xc2\x78\xb9\xa8\x44\x87\x5a\xf3\x14\x74\xa2\xdb\x90\xf6\xb0\x63\x95\xac\x51\x4f\x32\xd8\x41\x1c\x2d\x17\x61\x25\x96\x8b\x50\xf0\xe5\xfe\x52\x19\x22\xe6\xdd\xba\x04\xcf\xb2\x9c\x3a\xcc\x29\xb2\xbc\x84\x29\x2a\xa9\xcd\xa7\x48\x70\x09\xff\xac\x8a\x21\xce\xbc\x56\x0d\xf2\xd7\xf8\x16\x70\x0b\xc5\x68\xb9\xa0\xc8\x52\x9d\x81\x8d\x46\x7f\xc5\x82\xca\xd5\xa8\xd9\xe5\x46\x0e\xc5\x6a\x2a\x4d\xaa\x74\xf1\x92\x0b\x78\xa7\xde\x70\xb9\xda\x31\xb2\x6f\x59\xcd\x81\x75\x1e\xb5\x54\x3b\xfb\x1b\xae\xe9\xd2\xcb\x77\x2d\xbc\x67\x10\xda\x0e\x05\xbb\x20\x7d\x7a\x1f\xc4\xee\xcb\x4a\x32\x2f\xbb\x0d\xb1\xae\xff\x51\xf4\xf6\x6c\xfa\x6f\x90\xeb\x2c\xee\xc8\xad\xdb\xdd\x42\x76\x04\x9b\x82\x0a\xf1\x28\x85\x6f\x21\x05\x0d\x92\x81\xb9\x47\xb5\xd3\x8d\xf4\x46\xba\x89\x67\xab\xef\x11\xf1\x68\xb7\x81\xc1\xb0\xd4\x8b\xfe\xd1\x51\xf9\x1f\x58\xf4\xff\xcf\x71\xb9\x53\x77\x2f\x4c\x53\x94\x96\x77\xc6\x24\x0c\xd1\x26\xa3\x54\x95\x66\x90\x69\x5a\xe6\x75\xb2\x92\x71\x9b\x57\x71\xd3\x54\x81\x05\xe1\xc6\x8a\x20\x56\x36\xa0\x25\x0f\x0f\x3a\x82\x30\x16\x2a\x0e\x63\x65\x49\xa6\x9e\xbc\x39\x39\x3b\x3f\xfd\xd6\xd2\x38\xda\x3a\x7b\x78\x14\x43\x5c\x65\x19\xe8\xc3\xc3\xab\x74\x87\x1f\xd1\x50\x0a\xca\x60\xbc\xc9\xaa\xf0\x14\x61\xdf\x99\x2e\xc0\x22\x97\xa3\xa4\x25\x31\xa5\xe0\x76\x8c\x43\x9f\x58\x4c\x4c\xce\x53\x3b\xf6\x0c\x69\xb0\x95\x96\x08\x0f\xb1\x51\x2f\x55\xb7\x48\x3a\x3f\x5d\x47\x4c\xae\x14\x97\xb5\x32\x37\xf4\xe4\x8d\xeb\x6c\xd9\x76\x1d\x07\x0c\xe0\x07\x9c\x31\x9e\xa5\xfc\xb8\x98\xfe\x6d\x64\x34\xfe\xd6\xde\x16\xd4\x58\xd0\xf7\x3a\xbd\xef\xde\xb6\xed\x71\x54\x83\x4c\x40\x5f\xe4\x54\xdb\x5d\x07\x99\xeb\x78\x9d\x4c\x51\x39\x45\x3c\xd5\xb4\x80\xd7\x89\x37\xe9\x6b\xb2\x4c\x46\x85\x78\xd9\xcd\xc5\x3b\x98\x78\x8a\xde\x6f\xb1\x3e\xb4\xb9\x9b\x06\x53\x09\x3b\x9c\xbd\xb9\xb4\xaa\x2a\xda\x44\xf7\x85\x00\xd7\x7c\xbe\x7e\x9d\x8c\x37\xa6\x10\xa3\xdd\x5e\xd8\x00\x79\xd2\xab\x87\xa4\x11\x92\x8a\xf5\x27\xf8\xb5\xcd\xee\x1e\x96\xe4\xee\xe6\x89\xc4\xe4\xea\xc6\x17\xb9\x2f\x49\x26\x8d\xa5\xda\x42\x82\x0f\xd1\x0c\xd8\xd7\xd2\x82\xbe\xa6\x62\xbc\x31\xd1\x25\xb3\x9b\x1c\x7b\x6b\xf0\xed\x14\x9d\xcc\x66\x33\x9f\x4d\xa4\x54\xc6\x8e\x11\x0e\x5b\xad\x78\xea\x20\xb8\x6d\xe7\x6e\x32\x6d\x74\x8b\xb6\x51\x1a\x0e\x11\x13\x40\xf5\xc6\x2e\x8f\xc2\xc7\x10\x91\x82\x65\x39\x97\x19\x4a\xa8\xa5\x28\xd5\xaa\x40\xcf\x5c\x95\xe2\x61\x03\x1d\x16\x0f\x75\x11\xb3\xad\x1d\xb2\xf2\xcb\xcb\x86\x5e\x0d\xf3\x52\x55\x32\xa9\x33\x7c\x3c\xad\x1f\x93\xfb\xe7\xbc\xaf\x6b\xaf\x9f\x9e\xa3\xa6\xe8\xfb\x80\x2e\x94\x94\xc0\x2c\x24\xc8\xaa\xb6\x13\xfb\x71\x1a\xcb\xea\x07\x49\xb9\xb0\xa0\xc7\x75\x5e\x17\x2d\x91\x7b\x76\xe9\x3d\xfa\x3a\xf2\x6f\xbf\x68\xb3\xb2\xbb\x42\x00\x45\xe8\x3d\x21\x44\xc2\x0d\xba\x04\xdb\xd4\x43\x05\x2d\xbd\xb0\x93\xc9\x07\x3f\x64\x07\x46\x8c\xd2\xde\x7d\xaa\x27\x94\x2a\xfd\x82\xb2\xdc\x95\x29\x35\xcb\xc3\x15\x57\x18\x76\xb3\x06\x45\xb6\xa9\x4f\x5d\xf6\xf8\x55\x77\xd4\xdd\xc9\x59\x14\x45\x75\xb9\xf1\xed\xb7\x4d\xff\x8a\xcb\xa4\xee\xc4\xee\x1f\x85\x37\xfd\x86\xa9\x72\x23\x3d\xd9\x78\xa3\xee\xd8\xaa\x0e\xdc\x09\x04\x5c\x83\xa8\x77\x93\xc3\xc3\xd6\xef\x9e\xdb\x3a\xf7\xd2\x39\x45\x24\x2d\xc0\x3d\x9b\xec\x45\x91\xee\xb0\x19\xa6\x61\x7f\xdb\xfb\x9b\x28\x32\x56\x57\xcc\xe2\x2d\x1d\xdd\xfc\x7b\x19\x71\x89\xff\x7d\x14\xb8\x52\x6e\xcf\xf7\x5a\x7f\xe3\x7e\x6b\xa2\x63\xa0\x6e\xde\x4f\x82\xfb\xd5\xb5\x4f\xb4\xc5\xb9\x5b\x7a\x97\x9a\xb4\xf3\x2d\x1d\x22\x27\x1d\x5a\x40\xe9\xe1\x0a\x72\x9b\x1b\xd9\x16\x3e\x8f\x58\x4e\x2d\x81\xdd\x7e\x7f\xaf\x6c\x5b\xb5\xed\x97\x6a\x5f\xb2\x8a\xd0\xe1\xfd\x44\x7f\x68\xe0\x96\x63\xa0\x7f\x27\x19\x18\xe3\xe3\x93\x93\xf9\xd9\x0f\x4f\xe3\xe0\x84\x26\x27\xc1\x7c\x9e\x7c\x1f\xd0\x39\x9c\x05\x09\xa4\xc7\xb3\xef\x8f\x4e\x92\x64\x9e\xe2\x29\xda\x78\x81\xeb\xdc\x21\x38\x1a\xda\xef\x7a\xe0\xf3\x33\x7a\x76\x3a\x67\x69\xc0\xe6\x33\x08\xe6\xec\xe9\x59\x70\x96\xce\x67\xc1\x11\x7d\x7a\x46\x8f\x66\xb3\xf9\x9c\x1d\x7b\xc0\x8f\x87\xc0\xbb\xd3\xcb\x04\x4c\x49\x4b\xb9\x04\x7d\xc7\xa1\x8f\xf6\x6e\x61\x1e\x31\x69\x44\x76\x6e\x4b\x46\x93\xdd\xb7\x87\x9c\xac\x24\xe7\x89\x57\xf0\x76\x42\x18\xb5\x2c\x1f\x83\xd6\xf7\x9f\x79\xa0\xb5\xd2\x4e\xf4\x30\xf6\xbe\xd8\x7e\x35\x24\x70\xbb\x6d\x6e\xef\x4d\xfb\x53\x16\xf5\xd5\x70\xff\xee\x94\xdc\x75\x1b\xe5\x31\x3d\xe1\xa6\x14\x74\x7d\x8e\x62\xa1\xd8\x0a\x7d\xcd\x8b\x52\x69\x4b\xa5\xbd\x33\xf5\x6b\x49\xf3\xe0\xc5\x94\xad\x32\xed\x8e\xfc\x80\x29\xa1\xf4\x39\x7a\x72\x0a\xf1\x0f\x69\x3c\x9c\x4e\xef\x7a\x14\xee\xb8\xb4\x08\xb7\xdf\x0e\x16\xb1\x4a\xd6\x3b\xd7\xd4\x09\xbf\x6e\x8b\xeb\xee\xd2\x73\xb9\x77\x6b\xdf\xde\x12\x73\x99\x11\x42\x76\x14\x24\xfc\x7a\x07\xc7\xd5\x26\x1d\x90\x9b\x13\x34\x1d\x4a\x20\x73\x74\x8c\x51\x6d\x4d\x84\x37\x24\x49\x25\xe1\x47\x8c\xfa\xba\x76\x8d\xd1\xea\x66\xcf\x92\x7d\x09\x2e\xcb\xca\x06\x29\x07\x91\x34\x7a\x4e\x3d\x13\xea\x49\xb5\x24\xe2\x49\x84\x33\x6e\xff\xea\xee\x72\xeb\xd3\x20\xc2\x16\x3e\x5a\xdc\x61\x5e\x53\xc1\x13\x6a\x01\xa3\xba\xc6\xcc\x95\x48\x40\x47\xf8\x85\xcb\x2b\x91\xcd\xc1\x25\xa8\x9b\x4c\xf1\x5f\x6f\xdf\xec\x7b\xb0\x51\x29\x68\xec\xce\x5c\xa5\xfb\x3a\x97\xaf\xb8\x45\x6d\x86\xbf\x08\x6b\xa1\x01\x00\xda\x99\x74\x43\xaf\xc1\x04\x90\xa6\x4e\x65\xf3\x22\x78\x96\x5b\x14\x5b\x19\xd4\x77\x04\x18\x29\xc9\x04\x67\xab\x08\xf7\x6b\x88\xf1\x37\xe3\xd1\x93\x1d\xf5\xa3\x3a\xe9\xbd\xa6\xa2\x82\x09\x5e\x3e\x6b\x64\x17\x21\xf5\xf0\xdc\x8f\xae\x2f\xe0\xa1\x0b\xb0\x7f\x21\x1d\xc6\x6e\x77\xf4\x70\x43\x6a\xc2\x37\x1f\x5a\x25\x1e\xf3\xf2\xe3\x65\x9b\xaa\x98\x45\x98\x1f\x7b\x24\x36\x57\x94\x1b\x7d\xbb\x57\xc0\x3e\xcc\xb0\x12\x77\x7a\xbc\xef\xc7\xde\x56\xdc\x38\x71\xf6\x38\x27\xbc\xb1\xbf\x54\x05\x20\x4d\x65\xa2\x0a\x04\x6b\x08\x18\x95\xc9\x1a\xd5\x87\xc3\x61\x02\x37\xe0\xfe\x81\xe5\x9b\x91\xa6\x64\xad\xff\x0d\xdd\x61\x86\x6e\x78\x62\xf3\x08\x1f\xcd\x66\x33\x8c\x72\x70\xcb\x2b\xc2\x27\xb3\x19\x5e\x2e\xc2\x46\xfe\xa1\x60\xc7\x03\x60\xa7\x77\x83\x3d\x64\xbd\xf5\x5f\xbd\x9f\xbb\x9a\xe2\x9f\x56\x36\x77\xd5\x0f\x97\xbf\x71\x9b\x5f\x68\x48\x40\xba\x3d\x6c\xec\x0a\x8f\xf6\xc3\xd4\xb3\xee\x9b\xe1\xce\xf0\xa4\x2d\xc9\x2a\x03\x03\xc7\x53\x73\x59\xd9\x6e\x6e\x5f\x58\x70\xe3\xfd\xeb\x9e\x89\xe7\x7c\x6a\xb7\xed\x66\xaf\x5e\x84\xf5\x57\xe0\xff\x04\x00\x00\xff\xff\xb4\xff\x73\x9e\x0c\x1e\x00\x00")

func htmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlIndexHtml,
		"html/index.html",
	)
}

func htmlIndexHtml() (*asset, error) {
	bytes, err := htmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/index.html", size: 7692, mode: os.FileMode(420), modTime: time.Unix(1568894713, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"html/index.html": htmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"html": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{htmlIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

