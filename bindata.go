// Code generated by go-bindata.
// sources:
// html/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _htmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\x6d\x6f\xe3\x36\x12\xfe\x7e\xbf\x82\x55\x8b\xb5\x85\x8d\x28\x3b\x71\x12\x6f\x62\xf9\xb0\x4d\x6f\xdb\x3b\xec\x1e\x0e\xcd\x1e\xfa\x86\xe2\x40\x91\x23\x89\x31\x45\xea\x48\x2a\x89\x5b\xe4\xbf\x1f\x48\x49\xb1\x6c\xcb\xd9\x4d\xbb\xb8\x37\x7f\x91\x44\x0e\x9f\x99\x79\x38\x1c\x92\xe3\x45\x61\x4b\xb1\xfc\x03\x42\x08\x2d\x0a\x20\xac\x79\xf5\x9f\x86\x6a\x5e\x59\x64\x34\x4d\x82\xc2\xda\xca\x5c\xc4\xb1\x39\xc1\xa4\x24\xbf\x28\x49\xee\x0c\xa6\xaa\x8c\x8d\xe5\x96\x16\x91\x61\x2b\x13\xdf\x98\x38\xad\x25\x13\x60\xe2\x19\x9e\xe1\x49\xdb\x89\x6f\x4c\xb0\x5c\xc4\x0d\xdc\x1e\xfe\xe3\xb7\xfb\x6d\xe9\xa2\x8a\x01\xbe\xf9\x67\x0d\x7a\xed\x55\x35\xaf\xd1\x09\x9e\xe1\x29\x2e\xb9\x74\xb8\x5b\xa3\xb9\xb4\x90\x6b\x6e\xd7\x49\x60\x0a\x72\x7c\x7a\x16\x5d\x5d\x7f\xaf\xf4\xf7\xb7\x3f\xd2\xf7\x2b\xc2\xef\xcf\x7e\xb8\x55\x67\xdf\x54\x15\xfd\xf1\x6b\xb0\xe9\x0f\xef\xbe\xfe\xee\xfa\x8d\xf8\xf2\x6e\xfe\x4d\x76\xf5\x17\x95\x6c\x63\x51\xad\x8c\x51\x9a\xe7\x5c\x26\x01\x91\x4a\xae\x4b\x55\x0f\xfb\x21\xb8\x5c\x21\x0d\x22\x09\x8c\x5d\x0b\x30\x05\x80\x0d\x50\xa1\x21\xeb\xf9\xc2\xe4\x8d\xc1\x54\xa8\x9a\x65\x82\x68\xf0\x0e\x91\x1b\x72\x1f\x0b\x9e\x9a\xb8\x24\x16\x34\x27\x82\xff\x02\xf1\x14\x4f\xf0\x24\xa6\x66\xab\xd5\xfb\x4b\x8d\x09\x3e\x30\x3f\xcf\xd6\x73\xb3\xaf\x66\x6b\xba\xd0\xae\xbe\xe5\x36\x4d\x4a\x1a\x8b\xa8\xe0\x20\x2d\x4a\x50\x3b\xe1\xd7\xcd\x83\x4b\x6e\x1b\xdc\xaf\x20\x23\xb5\xb0\xaf\xab\xea\xca\x8b\x8e\x47\xd4\x92\xdc\xdc\x72\x13\xa5\xeb\x92\xd0\x51\x78\x39\x00\xcb\x52\x94\xb4\xd8\x38\x07\x7b\x0d\xfa\x96\x53\x68\x11\x5a\x55\xdf\x42\xa9\x2c\xbc\x53\x32\x57\x4d\x07\xce\x08\xb5\x4a\xaf\x8f\xd0\xa8\x74\xad\x2c\x8d\x88\x15\xc4\x8c\x42\xcc\xd2\x56\xaf\x53\xb7\xa5\x0f\x7d\x31\x66\x8a\xd6\x25\x48\x1b\x62\x0d\x84\xad\xc7\x59\x2d\xa9\xe5\x4a\x8e\xc3\x5f\xb7\x45\xbd\xf4\x08\x53\x25\x04\xa9\x0c\x4f\x05\x8c\xc2\xfe\xd7\x78\xc7\x97\x87\xde\xf7\x86\x56\xff\xeb\x71\xeb\x22\x67\x9b\xda\x3e\x66\xe4\x96\x26\xe8\x48\xaa\xa8\x24\x3a\xe7\x12\xed\x1b\xc5\xb8\xa9\x04\x59\x5f\xa0\x54\x28\xba\x42\x9f\xf1\xb2\x52\xda\x12\x69\x77\xcc\xe9\x1b\xb3\xd1\xba\x88\x37\xab\x7f\x91\x2a\xb6\xee\x05\x1a\xe3\xb7\x88\x0a\x62\x8c\x8b\x70\x62\xeb\x7e\x14\xba\xdf\x9f\xbb\x79\xe6\x32\xc7\x18\xf7\x14\x30\x7e\x7b\x18\xc7\x44\x54\x49\x4b\xb8\x04\x1d\x20\x6f\x4a\x12\x3c\x3a\x21\x95\x84\xcb\x1d\x3d\x8b\xe2\x78\xb9\xe7\xf6\xb5\x2a\x01\x69\x22\x99\x2a\x11\xac\x21\xa2\x44\xb2\x35\xa2\x05\xd1\xd6\x6c\x8f\x8e\x77\x87\x2f\xb6\xcc\xdb\xea\xe1\x99\x26\x25\x74\x56\xa5\x4a\x33\xd0\xad\x51\xcd\x47\xa4\x09\xe3\xb5\xb9\x40\xc7\xd5\xfd\x65\xaa\xee\x23\x53\x10\xa6\xee\x2e\xd0\xc4\xb5\xa0\xe9\xa4\xba\x47\x13\xa4\xf3\x94\x8c\xcf\x27\x47\xe8\xfc\xec\x08\x9d\xbf\x3a\x42\xf8\x38\xbc\x0c\xd0\x1d\x67\xb6\x48\x82\xb3\xd9\x24\x40\x05\xf0\xbc\xb0\x49\x30\x9b\x4f\x82\x9d\xb5\xec\x7d\xc0\x6d\x14\xfb\x95\xdc\x34\x45\x56\x95\xa0\x2d\x18\x1b\x71\x9d\x57\x3a\x86\x32\x05\xd6\x76\xfe\x91\xb3\xe4\xf8\xe4\x64\x36\x7f\x75\x9e\x46\x27\x84\x9d\x44\xb3\x19\x3b\x8d\xc8\x0c\xe6\x11\x83\xec\x78\x72\x3a\x3d\x61\x6c\x96\xbd\xb0\x20\x89\xb4\xc9\x19\x9b\x4d\xb3\x93\x34\x8b\xe6\xe7\xf3\x69\x34\x7b\x95\x1d\x47\x64\x3a\x4f\xa3\xec\x74\x02\xa7\x64\x7e\x4e\x80\x4d\x5d\x3e\x68\x18\xf9\xbf\xa4\x6b\x36\x27\xf3\xb3\x19\xcd\x22\x3a\x9b\x40\x34\xa3\xe7\xf3\x68\x9e\xcd\x26\xd1\x94\x9c\xcf\xc9\x74\x32\x99\xcd\xe8\xf1\xa7\xa0\x6b\x67\x3d\xa0\xad\x0c\x70\x78\xad\x54\x84\xae\x48\x0e\xbf\x69\xb9\xfc\xad\x1d\x3b\x10\xfc\xb5\xd8\x55\x80\x7a\x19\x67\x17\x2b\xae\xc5\xf2\xa0\xb1\xdd\xce\x30\x90\xc3\x09\x63\xad\x0d\x28\x41\x8f\x39\xb5\x5a\xe5\xe1\x40\x0a\xfb\x62\x1c\xe0\xce\x98\x20\xc4\xa4\xaa\x40\xb2\x71\xb0\x10\xbc\x35\x75\xb4\x9f\x13\xd1\x53\x69\x72\xb4\x6c\xe1\xd0\x22\x5d\x06\xe8\x25\xaa\x56\x39\x7a\x89\x82\x45\x9c\x2e\x37\x04\x8c\xb8\x94\xa0\xa3\x4e\xd4\x01\x82\xb7\x73\x0b\xdb\x25\x45\xb4\x25\x19\xf5\x10\x47\x4b\x4f\xd1\x22\x16\x7c\x19\xec\xee\x00\x07\x88\x79\xbf\xae\x76\x59\x39\x42\x96\x57\x70\x84\x2a\x62\x8b\x23\x24\xb8\x84\xbf\xd6\xe5\x21\xaa\x06\x8d\x39\x48\x5b\xe3\x52\xc4\x2d\x94\xa3\xe5\x82\x20\x4b\x74\x0e\x36\x19\xfd\x23\x15\x44\xae\x46\xcd\x81\x65\xe4\x50\xac\x26\xd2\x64\x4a\x97\x6f\xb8\x80\xf7\xea\x2d\x97\xab\xf1\x8e\x41\xde\x63\xeb\xec\x6f\x89\x75\x66\x37\xcc\x92\xe5\x20\xbb\x5e\x78\xc7\x0e\xb4\xe9\x8a\xfa\x20\xdb\x64\x7e\x14\x97\x6f\x6a\x49\xfb\x5c\x36\x34\xba\xcf\x67\x91\xb9\x65\xca\xbf\x91\x4a\x67\x68\x47\xa5\x7f\xef\x82\xd4\xd1\x69\x4a\x22\xc4\xb3\xf4\x7c\x0b\x19\x68\x90\x14\xcc\xb0\x46\xa7\x12\xe9\x47\xa1\x66\xd2\x5a\x35\xcf\x20\xbd\x5d\xd9\xbb\xdc\xfb\x38\x7e\x36\xf5\xff\xb9\x38\xfe\x1f\x24\xff\x49\x95\xfd\xb9\xc8\xb8\x80\x0f\x4e\x42\x1c\x23\x27\x77\x11\xc7\xf1\xdf\x0d\x68\x13\xfb\x1d\x73\x4d\x56\x5c\xc7\x16\x04\xe4\x9a\x94\x51\xaa\x6c\x44\x2a\x1e\x17\x20\x2a\xd0\x06\xe7\x6a\x08\xe7\xf1\xa2\xa8\x6a\x4d\xdd\xc0\xaa\xf0\x5b\x71\xce\x6d\x51\x37\xbb\x72\xae\xa2\x3d\xd0\xbd\x86\x28\x4e\x85\x4a\xe3\x54\x59\x9c\xab\xcf\xdf\x9e\xcc\x2f\xce\x5e\x58\x92\x26\x1b\xde\xf6\xb4\x37\xcc\x68\x28\xd5\x2d\xbc\x73\x89\x35\xf8\xb0\x37\xc1\xe5\x01\x98\x4a\x43\xc6\xef\x1d\xc8\x6f\xb3\x7c\x00\xb8\x9b\x0a\x37\x3d\xed\x2b\xd6\x50\x09\x42\x61\xdc\x59\x7d\x84\x82\xdd\xdd\xc3\xfd\x34\xd8\x5a\x4b\x14\x1c\x62\xd7\xaf\x99\xc6\xe2\x97\x1b\x3d\x2f\x51\xf0\xf9\x5b\xd7\xd5\x4e\xbd\x6b\xd8\xa3\x31\xf8\x88\xbd\x6a\x60\x21\xfd\x37\xc4\xd8\x73\x67\xc6\x47\x54\x49\x8c\x05\xfd\x94\x86\xdd\x00\xf8\x04\xea\x0e\x86\xd9\xef\x8e\xd6\xdf\x1f\x54\x1f\x8e\x9b\x43\x17\xc8\xde\xf1\xd5\x7b\xd4\xdc\xbf\x49\x6d\x0b\x2c\x54\xce\xe5\x77\xdc\x16\x57\x1a\x18\x48\x77\x3d\x1c\x4b\xb8\xeb\x0a\x04\xaf\xbb\x82\x4a\xaf\x3b\x0c\xb1\x2d\x40\x8e\x6b\x03\x1a\x25\xbb\x17\x0d\x7f\xa2\xef\x92\xff\x38\xf0\xd7\xf8\x20\xc4\x19\x97\x6c\xfc\xeb\x43\x88\x89\x79\xad\x35\x59\x8f\xb7\x73\x67\x0b\xc9\x14\x35\x28\x59\x0e\x44\xa5\x9b\x05\x25\xc0\xd9\x3b\x0e\xde\xa8\x5a\x32\xe4\x84\x83\x23\xff\x08\x9f\x96\xff\xc9\x97\x1d\xbe\xfa\x12\x35\xf5\x8e\x9f\xd1\x95\x92\x12\xa8\x05\x86\xac\x6a\x1b\x83\x7d\x8c\xc6\x1a\xff\xc0\x19\x17\x16\xf4\xd8\x1f\x86\x92\x25\x72\xcf\xee\x04\x8c\x3e\x4b\x86\xe7\xad\x8d\xcf\xee\xd0\x9e\xa0\x9f\x30\xc6\x8e\xdc\x6b\xb0\xde\x55\x5c\x92\x6a\x10\x32\x0c\x7f\xde\x87\xeb\x80\xb0\x51\xda\xee\x16\x2f\xb6\x04\x32\xa5\xff\x44\x68\xe1\xf6\x77\xcf\x26\x1a\xbc\x0c\xc6\x71\x37\x62\xb0\x7b\x73\x6c\xf0\xb7\x80\x7d\x75\x1d\x45\x4f\x72\x93\x24\x89\x3f\x79\xbf\x78\xd1\xb4\xaf\xb8\x64\xbe\x31\x70\x59\x29\x78\x6c\x37\x54\x55\x8f\xd2\xe1\xa3\x07\x6a\x38\x1a\xf6\x5d\x88\x04\xdc\x82\xf0\xa9\x6e\x7f\xc3\xd9\x77\xc9\x9d\x84\x9a\xe3\x8f\xc2\x92\x94\xe0\x9e\x4d\x66\x54\xb8\xcb\x8d\xc3\x1e\x3f\x7c\x7a\x26\x8c\xd5\x35\xb5\xc1\xc6\xeb\x6e\xfc\x93\x8e\xbb\x13\xf0\x53\x9e\xba\x4b\x4b\xe3\xa2\x57\xd7\x78\xd9\x5a\xe4\x1c\xf5\xaf\x4f\xfb\xea\x7e\xfe\xa8\x9f\x6c\x30\x0e\x4b\xf6\x19\xc8\x3a\x17\xb2\x43\x1c\x64\x87\xc2\x21\xdb\x8f\x07\x97\xe8\xf0\xe6\xb0\xff\x91\xc1\xd1\xf2\xd4\xed\x7e\x4f\xca\xb5\x17\x93\xf6\x36\xf2\xdc\x98\x40\x3e\x2e\x3e\x3a\x5c\x1e\xf6\xaa\x9a\xed\xf9\xba\x2d\xda\x85\xb8\xe0\x6c\xaf\x3c\xd9\x17\xea\x97\x18\x42\x6c\x0a\x75\x77\x48\x7a\xa0\x26\x31\x3c\xe0\x21\xc4\x94\x58\x5a\x8c\x41\xeb\x21\x5e\xbb\x84\x0a\x5a\x2b\xed\x84\xc2\x83\xc5\xd3\x5e\xf9\xb4\x2d\x59\x36\x75\xca\x45\xec\xff\xc3\xf8\x57\x00\x00\x00\xff\xff\x0a\x4f\x50\xc2\xca\x18\x00\x00")

func HtmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlIndexHtml,
		"html/index.html",
	)
}

func htmlIndexHtml() (*asset, error) {
	bytes, err := HtmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/index.html", size: 6346, mode: os.FileMode(420), modTime: time.Unix(1568822747, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"html/index.html": htmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"html": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{htmlIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
