// Code generated by go-bindata.
// sources:
// html/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _htmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x6d\x8f\xdb\x36\x12\xfe\xde\x5f\xc1\x32\x45\x6d\xa3\x16\xe5\xdd\x75\x37\xdb\xad\x65\x20\xd9\x26\x69\x0e\xe9\xa1\xc8\xe6\xd0\x97\x20\x28\x28\x6a\x24\x71\x4d\x91\x3a\x92\xda\x8d\x13\xec\x7f\x3f\x90\x92\x6c\xcb\x96\xf6\x25\x28\x70\x77\xfe\x62\x9a\x1a\x3e\x33\xf3\x0c\x3d\x9c\xa1\x16\xb9\x2d\xc4\xf2\x2b\x84\x10\x5a\xe4\x40\x93\x7a\xe8\x7f\x1a\xa6\x79\x69\x91\xd1\x2c\xc2\xb9\xb5\xa5\x39\x0f\x43\x73\x42\x68\x41\x3f\x29\x49\x6f\x0c\x61\xaa\x08\x8d\xe5\x96\xe5\x81\x49\x56\x26\xbc\x32\x61\x5c\xc9\x44\x80\x09\xe7\x64\x4e\x66\xcd\x43\x72\x65\xf0\x72\x11\xd6\x70\x07\xf8\x9b\xdf\xee\xd3\xd1\xc5\x54\x02\xe4\xea\xdf\x15\xe8\xb5\x57\x55\x0f\x83\x13\x32\x27\x47\xa4\xe0\xd2\xe1\x76\x56\x73\x69\x21\xd3\xdc\xae\x23\x6c\x72\x7a\xfc\xfd\x69\x70\x71\xf9\xbb\xd2\xbf\x5f\xff\xc9\xde\xad\x28\xff\x78\xfa\xc7\xb5\x3a\xfd\xb9\x2c\xd9\x9f\xaf\xc0\xc6\x7f\xfc\xf2\xea\xb7\xcb\x97\xe2\xf9\xcd\xd9\xcf\xe9\xc5\x3f\x54\xd4\xc5\x62\x5a\x19\xa3\x34\xcf\xb8\x8c\x30\x95\x4a\xae\x0b\x55\xf5\xfb\x21\xb8\x5c\x21\x0d\x22\xc2\xc6\xae\x05\x98\x1c\xc0\x62\x94\x6b\x48\x77\x7c\x49\xe4\x95\x21\x4c\xa8\x2a\x49\x05\xd5\xe0\x1d\xa2\x57\xf4\x63\x28\x78\x6c\xc2\x82\x5a\xd0\x9c\x0a\xfe\x09\xc2\x23\x32\x23\xb3\x90\x99\xce\xac\xf7\x97\x19\x83\xef\x89\xcf\xa3\xf5\x5c\x1d\xaa\xe9\x84\x0b\xed\xeb\x5b\x76\x69\x52\xd2\x58\xc4\x04\x07\x69\x51\x84\x9a\x80\x5f\xd6\x5f\x5c\x72\x5b\xe3\xfe\x04\x29\xad\x84\x7d\x56\x96\x17\x5e\x74\x3c\x62\x96\x66\xe6\x9a\x9b\x20\x5e\x17\x94\x8d\x26\x3f\xf6\xc0\x26\x31\x8a\x1a\x6c\x92\x81\xbd\x04\x7d\xcd\x19\x34\x08\x8d\xaa\xb7\x50\x28\x0b\xbf\x28\x99\xa9\xfa\x01\x49\x29\xb3\x4a\xaf\xa7\x68\x54\xb8\xd9\x24\x0e\xa8\x15\xd4\x8c\x26\x24\x89\x1b\xbd\x4e\x5d\x8f\x3e\xa7\xc3\x52\x5b\x19\x14\xa1\xb4\x92\xcc\x72\x25\xc7\xa5\x56\x57\xc0\xec\x04\x7d\xee\xac\x68\x57\x29\x01\x44\xa8\x6c\x8c\x37\x8b\xcf\xb9\xc4\x7b\xee\xb8\x4f\x12\x13\xa6\x84\x80\x1a\x15\x1b\x2f\x8b\x27\x24\xe5\x32\x19\x7f\xc6\x8d\x1a\x7c\x8e\x9a\xd1\xed\x84\x50\xf3\x4c\x6b\xba\x1e\x4f\x88\xcd\x41\x8e\x13\xc5\x0c\x8a\x96\x3d\x86\xf8\xcd\x9f\x22\x2f\x41\x04\xc8\xcc\xe6\x68\x89\x66\x13\xf4\x19\xf5\xca\xba\xcf\x37\x63\x4c\x5a\x23\xde\xcf\x3e\x10\x2e\x25\xe8\x77\xf0\xd1\x85\xb1\x31\x01\x7d\x87\xb0\x1b\x33\x30\x86\xcb\xec\x1c\x61\xf4\x1d\x72\x3a\x9c\x7c\xbd\xf6\xd0\x4f\xf7\xb9\x3d\x54\x7b\x3b\xe9\x4c\xdd\xf6\xf1\x4f\x93\xe4\x57\xca\x56\x34\x83\x4e\x00\x56\x59\x1f\xf9\xce\xfe\xb2\x96\x76\x34\xd2\xb2\x04\x99\x8c\xf1\x42\x70\xc4\x04\x35\x26\x1a\x39\xba\x69\x69\x78\x2c\x20\x70\xa9\x0d\x34\x3a\x9c\x0a\xa4\x0a\x0a\xaa\x33\x2e\x47\xcb\x06\x0e\x2d\xe2\xa5\xf3\xb4\x5c\x65\x8e\x81\x45\x18\x2f\x17\x95\x68\x51\x3d\x4f\x41\x2b\xba\x0d\x69\x07\x3b\x56\xc9\x1a\x75\x24\x83\x1d\xc4\xd1\x72\x11\x56\x62\xb9\x08\x05\x5f\xee\x6f\x95\x21\x62\xde\xad\x4b\xe8\xd9\x96\x53\x87\x39\x45\x96\x97\x30\x45\x25\xb5\xf9\x14\x09\x2e\xe1\x9f\x55\x31\xc4\x59\xaf\x55\x83\xfc\xd5\xbe\x05\xdc\x42\x31\x5a\x2e\x28\xb2\x54\x67\x60\xa3\xd1\x5f\xb1\xa0\x72\x35\xaa\xb3\xdc\xc8\xa1\x58\x4d\xa5\x49\x95\x2e\x5e\x72\x01\xef\xd4\x1b\x2e\x57\x3b\x46\x76\x2d\xf3\x1c\x58\xe7\x51\x43\xb5\xb3\xbf\xe6\x9a\x2e\x7b\xf9\xf6\xc2\x7b\x06\xa1\xed\xa3\x60\x17\xa4\x4b\xef\x83\xd8\x7d\x59\x49\xd6\xcb\x6e\x4d\xac\x9b\x7f\x14\xbd\x1d\x9b\xfe\x1b\xe4\x3a\x8b\x5b\x72\xfd\xb8\xdd\xc8\x8e\x60\x53\x50\x21\x1e\xa5\xf0\x2d\xa4\xa0\x41\x32\x30\xf7\xa8\x76\xba\x91\xde\x48\xd7\xf1\x6c\xf4\x3d\x22\x1e\x4d\x1a\x18\x0c\x8b\xdf\xf4\x8f\x8e\xca\xff\xc0\xa6\xff\x7f\x8e\xcb\x9d\xba\x3b\x61\x9a\xa2\xb4\xbc\x33\x26\x61\x88\x36\x15\xa5\xaa\x34\x83\x4c\xd3\x32\xf7\xc5\x4a\xc6\x6d\x5e\xc5\xf5\x50\x05\x16\x84\x7b\x56\x04\xb1\xb2\x01\x2d\x79\x78\x30\x11\x84\xb1\x50\x71\x18\x2b\x4b\x32\xf5\xe4\xcd\xc9\xd9\xf9\xe9\xb7\x96\xc6\xd1\xd6\xd9\xc3\xa3\x18\xe2\x2a\xcb\x40\x1f\x1e\x5e\xa5\x3b\xfc\x88\x86\x52\x50\x06\xe3\x4d\x55\x85\xa7\x08\xf7\x9d\xe9\x02\x2c\x72\x35\x4a\x5a\x12\x53\x0a\x6e\xc7\x38\xec\x13\x8b\x89\xc9\x79\x6a\xc7\x3d\x8f\x34\xd8\x4a\x4b\x84\x87\xd8\xf0\x5b\xd5\x6d\x92\xd6\x4f\x37\x11\x93\x2b\xc5\xa5\x57\xe6\x1e\x3d\x79\xe3\x26\x1b\xb6\xdd\xc4\x01\x03\xf8\x01\x67\x4c\xcf\x56\x7e\x5c\x4c\xff\x36\x32\x6a\x7f\xbd\xb7\x05\x35\x16\xf4\xbd\x4e\xef\xbb\xb7\x1d\xf7\x38\xaa\x41\x26\xa0\x2f\x72\xaa\xed\xae\x83\xcc\x4d\xbc\x4e\xa6\xa8\x9c\x22\x9e\x6a\x5a\xc0\xeb\xa4\xb7\xe8\xab\xab\x4c\x46\x85\x78\xd9\xae\xc5\x3b\x98\x78\x8a\xde\x6f\xb1\x3e\x34\xb5\x9b\x06\x53\x09\x3b\x5c\xbd\xb9\xb2\xaa\x2a\x9a\x42\xf7\x85\x00\x37\x7c\xbe\x7e\x9d\x8c\x37\xa6\x10\xa3\x5d\x2e\xac\x81\x7a\xca\xab\x87\x94\x11\x92\x8a\xf5\x27\xf8\xb5\xa9\xee\x1e\x56\xe4\xee\xd6\x89\xc4\xe4\xea\xa6\x2f\x72\x5f\x52\x4c\x1a\x4b\xb5\x85\x04\x1f\xa2\x19\xb0\xaf\xa5\x05\x7d\x4d\xc5\x78\x63\xa2\x2b\x66\x37\x35\xf6\xd6\xe0\xdb\x29\x3a\x99\xcd\x66\x7d\x36\x91\x52\x19\x3b\x46\x38\x6c\xb4\xe2\xa9\x83\xe0\xb6\x59\xbb\xa9\xb4\xd1\x2d\xda\x46\x69\x38\x44\x4c\x00\xd5\x1b\xbb\x7a\x14\x3e\x86\x88\x14\x2c\xcb\xb9\xcc\x50\x42\x2d\x45\xa9\x56\x05\x7a\xe6\xba\x94\x1e\x36\xd0\x61\xf3\xe0\x9b\x98\x6d\xef\x90\x95\x5f\xde\x36\x74\x7a\x98\x97\xaa\x92\x89\xaf\xf0\xf1\xd4\x7f\x4d\xee\x5f\xf3\xde\xf7\x5e\x3f\x3d\x47\x75\xd3\xf7\x01\x5d\x28\x29\x81\x59\x48\x90\x55\xcd\x24\xee\xc7\xa9\x2d\xf3\x5f\x24\xe5\xc2\x82\x1e\xfb\xba\x2e\x5a\x22\xf7\xdd\x96\xf7\xe8\xeb\xa8\x3f\xfd\xa2\xcd\xce\x6e\x1b\x01\x14\xa1\xf7\x84\x10\x09\x37\xe8\x12\x6c\xdd\x0f\x15\xb4\xec\x85\x9d\x4c\x3e\xf4\x43\xb6\x60\xc4\x28\xdd\x9b\xa7\x3a\x42\xa9\xd2\x2f\x28\xcb\x5d\x9b\xe2\x59\x1e\xee\xb8\xc2\xb0\x5d\x35\x28\xb2\x2d\x7d\x7c\xdb\xd3\xaf\xba\xa5\xee\x4e\xce\xa2\x28\xf2\xed\xc6\xb7\xdf\xd6\xf3\x2b\x2e\x13\x3f\x89\xdd\x3f\x0a\x6f\xe6\x0d\x53\xe5\x46\x7a\xb2\xf1\x46\xdd\x91\xaa\x0e\xdc\x09\x04\x5c\x83\xf0\xd9\xe4\xf0\xb0\xed\x77\xcf\xa5\xce\xbd\x72\x4e\x11\x49\x0b\x70\xdf\x75\xf5\xa2\x48\x7b\xd8\x0c\xd3\xb0\x9f\xf6\xfe\x26\x8a\x8c\xd5\x15\xb3\x78\x4b\x47\xbb\xfe\x5e\x46\x5c\xe1\x7f\x1f\x05\xae\x95\xdb\xf3\xdd\xeb\xaf\xdd\x6f\x4c\x74\x0c\xf8\xe1\xfd\x24\xb8\x8f\xef\x7d\xa2\x2d\xce\xdd\xd2\xbb\xd4\xa4\xad\x6f\xe9\x10\x39\xe9\xd0\x06\x4a\x0f\x77\x90\x4b\x6e\x64\xdb\xf8\x3c\x62\x3b\x35\x04\xb6\xf9\xfe\x5e\xd9\xa6\x6b\xdb\x6f\xd5\xbe\x64\x17\xa1\xc3\xfb\x89\xee\xa3\x81\x5b\x8e\x81\xf9\x9d\x62\x60\x8c\x8f\x4f\x4e\xe6\x67\x3f\x3c\x8d\x83\x13\x9a\x9c\x04\xf3\x79\xf2\x7d\x40\xe7\x70\x16\x24\x90\x1e\xcf\xbe\x3f\x3a\x49\x92\x79\x8a\xa7\x68\xe3\x05\xf6\xb5\x43\x70\x34\x94\xef\x3a\xe0\xf3\x33\x7a\x76\x3a\x67\x69\xc0\xe6\x33\x08\xe6\xec\xe9\x59\x70\x96\xce\x67\xc1\x11\x7d\x7a\x46\x8f\x66\xb3\xf9\x9c\x1d\xf7\x80\x1f\x0f\x81\xb7\xa7\x97\x09\x98\x92\x96\x72\x09\xfa\x8e\x43\x1f\xed\xdd\xc2\x3c\x62\xd1\x88\xec\xdc\x96\x8c\x26\xbb\xbf\x1e\x72\xb2\x92\x9c\x27\xbd\x82\xb7\x13\xc2\xa8\x65\xf9\x18\xb4\xbe\xff\xcc\x03\xad\x95\x76\xa2\x87\xb1\xef\x8b\xed\x57\x43\x02\xb7\xdb\xe1\xf6\xde\xb4\xbb\x64\xe1\xaf\x86\xbb\x77\xa7\xe4\xae\xdb\xa8\x1e\xd3\x13\x6e\x4a\x41\xd7\xe7\x28\x16\x8a\xad\xd0\xd7\xbc\x28\x95\xb6\x54\xda\x3b\x4b\xbf\x86\xb4\x1e\xbc\x98\xb2\x55\xa6\xdd\x91\x1f\x30\x25\x94\x3e\x47\x4f\x4e\x21\xfe\x21\x8d\x87\xcb\xe9\x5d\x8f\xc2\x1d\x97\x16\xe1\xf6\xdd\xc1\x22\x56\xc9\x7a\xe7\x9a\x3a\xe1\xd7\x4d\x73\xdd\x5e\x7a\x2e\xf7\x6e\xed\x9b\x5b\x62\x2e\x33\x42\xc8\x8e\x82\x84\x5f\xef\xe0\xb8\xde\xa4\x05\x72\x6b\x82\x7a\x42\x09\x64\x8e\x8e\x31\xf2\xd6\x44\x78\x43\x92\x54\x12\x7e\xc4\xa8\xab\x6b\xd7\x18\xad\x6e\xf6\x2c\xd9\x97\xe0\xb2\xac\x6c\x90\x72\x10\x49\xad\xe7\xb4\x67\x81\x5f\xe4\x25\x11\x4f\x22\x9c\x71\xfb\x57\x7b\x97\xeb\x4f\x83\x08\x5b\xf8\x68\x71\x8b\x79\x4d\x05\x4f\xa8\x05\x8c\x7c\x8f\x99\x2b\x91\x80\x8e\xf0\x0b\x57\x57\x22\x9b\x83\x2b\x50\x37\x95\xe2\xbf\xde\xbe\xd9\xf7\x60\xa3\x52\xd0\xd8\x9d\xb9\x4a\x77\x75\x2e\x5f\x71\x8b\x9a\x0a\x7f\x11\x7a\xa1\x01\x00\xda\x9a\x74\x43\xaf\xc1\x04\x90\xa6\x4e\x65\xfd\x43\xf0\x2c\xb7\x28\xb6\x32\xf0\x77\x04\x18\x29\xc9\x04\x67\xab\x08\x77\x7b\x88\xf1\x37\xe3\xd1\x93\x1d\xf5\x23\x5f\xf4\x5e\x53\x51\xc1\x04\x2f\x9f\xd5\xb2\x8b\x90\xf6\xf0\xdc\x8d\x6e\x5f\xc0\x43\x17\xe0\xe1\x8d\xb4\x9b\x6f\x06\xa2\xbf\x87\x9f\x1f\x1f\xda\x71\xa9\x0a\x40\x9a\xca\x44\x15\x08\xd6\x10\x30\x2a\x93\x35\xf2\x79\xd2\xec\x59\xb7\xbf\x7c\x71\xe0\x41\xbd\x17\x7c\xc7\xe6\x37\x43\x9b\xcb\xd1\x0d\x4f\x6c\x1e\xe1\xd3\xf9\x0c\xa3\x1c\x1c\xb9\x11\x9e\x9f\xcd\xf0\x72\x11\xd6\xe2\x0f\xc1\x39\x7e\x34\x4e\x0f\xc9\x83\x7f\xaf\x1d\x76\x7b\x12\xfa\x83\x09\x6e\xea\x3b\xd3\x43\xd7\xe6\x4e\x77\xa3\x60\xf7\xce\x7c\x1f\x2b\xac\xc4\x72\xd0\xd8\xde\x57\x51\x75\x63\x4e\x2b\x9b\xbb\xce\x84\xcb\xdf\xb8\xcd\x2f\x34\x24\x20\x5d\x7e\x19\xbb\xa6\xa0\x79\x69\xf4\xac\x7d\x9f\xb7\xf3\x78\xd2\xb4\x4b\x95\x81\x81\xa3\xa3\xbe\x48\x6c\x12\xcf\x17\x36\xc3\x78\xff\x2a\x66\xd2\x73\x76\x34\x29\xb5\xce\xa3\x8b\xd0\xbf\xa1\xfd\x4f\x00\x00\x00\xff\xff\x95\xfc\x51\xa5\xa8\x1d\x00\x00")

func htmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlIndexHtml,
		"html/index.html",
	)
}

func htmlIndexHtml() (*asset, error) {
	bytes, err := htmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/index.html", size: 7592, mode: os.FileMode(420), modTime: time.Unix(1568894051, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"html/index.html": htmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"html": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{htmlIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

